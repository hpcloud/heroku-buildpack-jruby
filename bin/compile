#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
#set -x

# clean up leaking environment
unset GIT_DIR

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
BUILD_DIR=$1
CACHE_DIR=$2

PROFILE_PATH="$BUILD_DIR/.profile.d/jruby.sh"

# Look for JRuby version in Gemfile
VERSION=`grep ^ruby $BUILD_DIR/Gemfile | sed 's/.*version[^0-9]*\([0-9\.]*\).*/\1/'`
# Try find preferred Ruby mode in the Gemfile
MODE=`grep ^ruby $BUILD_DIR/Gemfile | cut -c 7-9`

export JRUBY_OPTS="--$MODE -J-Xmx400m -Xcext.enabled=true -J-XX:+UseCompressedOops -J-noverify"

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

source $BIN_DIR/utils

function download_and_install_jdk {
  curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
  . bin/java

  # create default system.properties for apps that had the jdk vendored in
  if [ -f ${CACHE_DIR}/.jdk/vendor ] && [ ! -f ${BUILD_DIR}/system.properties ]; then
    echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
  fi

  if [ -f ${CACHE_DIR}/system.properties ] && [ ! -f ${BUILD_DIR}/system.properties ]; then
    cp ${CACHE_DIR}/system.properties ${BUILD_DIR}/system.properties
  fi

  # install JDK
  if [ -f ${BUILD_DIR}/system.properties ]; then
    mkdir -p $CACHE_DIR
    logger -p user.notice -t "slugc[$$]" "language_pack_java download_jdk"
    LOGGER_FLAGS="$LOGGER_FLAGS download_jdk"
    javaVersion=$(detect_java_version ${BUILD_DIR})
    puts-step "Installing OpenJDK ${javaVersion}..."
    install_java ${BUILD_DIR} ${javaVersion}
    jdk_overlay ${BUILD_DIR}
    echo "done" | indent
    cp ${BUILD_DIR}/system.properties ${CACHE_DIR}/
  fi
}

function download_jruby_and_install_default_gems {
  if [ ! -d "$CACHE_DIR/jruby-$VERSION" ]; then
    mkdir -p $CACHE_DIR
    puts-step "Deleting previous JRuby installations if any"
    rm -rf $CACHE_DIR/jruby-*
    JRUBY_TAR=http://jruby.org.s3.amazonaws.com/downloads/$VERSION/jruby-bin-$VERSION.tar.gz
    puts-step "Downloading and unpacking JRuby"
    curl $JRUBY_TAR -s -o - | tar xzf - -C $CACHE_DIR/
    PATH=$CACHE_DIR/jruby-$VERSION/bin:$PATH

    puts-step "Installing JRuby-OpenSSL, Bundler and Rake"
    jruby $JRUBY_OPTS -S jgem install jruby-openssl bundler rake | indent
  fi
}

function copy_jruby_to_build {
  puts-step "Vendoring JRuby into slug"
  cp -ru $CACHE_DIR/jruby-$VERSION $BUILD_DIR/.jruby
  PATH=$BUILD_DIR/.jruby/bin:$PATH
}

function get_bundle_cache {
  if [ -d $BUNDLE_CACHE ]; then
    mkdir -p $BUNDLE_DIR
    cp -ru $BUNDLE_CACHE/* $BUNDLE_DIR
  fi
}

function store_bundle_cache {
  rm -rf $BUNDLE_CACHE
  mkdir -p $BUNDLE_CACHE
  cp -ru $BUNDLE_DIR/* $BUNDLE_CACHE
}

function bundle_install {
  puts-step "Installing dependencies with Bundler"

  cd $BUILD_DIR
  jruby $JRUBY_OPTS -r openssl -S bundle install --without development:test --binstubs --deployment --clean | indent

  echo "Dependencies installed" | indent
}

function bundle_install_with_cache {
  BUNDLE_CACHE=$CACHE_DIR/vendor/bundle
  BUNDLE_DIR=$BUILD_DIR/vendor/bundle

  get_bundle_cache
  bundle_install
  store_bundle_cache
}

function create_database_yml {
  puts-step "Writing config/database.yml to read from DATABASE_URL"
  mkdir -p $BUILD_DIR/config
  cat > $BUILD_DIR/config/database.yml << EOF
<%
require 'cgi'
require 'uri'

begin
  uri = URI.parse(ENV["DATABASE_URL"])
rescue URI::InvalidURIError
  raise "Invalid DATABASE_URL"
end

raise "No RACK_ENV or RAILS_ENV found" unless ENV["RAILS_ENV"] || ENV["RACK_ENV"]

def attribute(name, value, force_string = false)
  if value
    value_string =
      if force_string
        '"' + value + '"'
      else
        value
      end
    "#{name}: #{value_string}"
  else
    ""
  end
end

adapter = uri.scheme
adapter = "jdbcpostgresql" if adapter == "postgres"
database = (uri.path || "").split("/")[1]
username = uri.user
password = uri.password
host = uri.host
port = uri.port
params = CGI.parse(uri.query || "")
%>

<%= ENV["RAILS_ENV"] || ENV["RACK_ENV"] %>:
  <%= attribute "adapter",  adapter %>
  <%= attribute "database", database %>
  <%= attribute "username", username %>
  <%= attribute "password", password, true %>
  <%= attribute "host",     host %>
  <%= attribute "port",     port %>

<% params.each do |key, value| %>
  <%= key %>: <%= value.first %>
<% end %>
EOF
}

function precompile_assets {
  cd $BUILD_DIR
  if [ -f $BUILD_DIR/public/assets/manifest.yml ]
  then
      echo "Detected manifest.yml, assuming assets were compiled locally" | indent
  else
      if ( jruby $JRUBY_OPTS -S bin/rake --dry-run --silent assets:precompile > /dev/null 2>&1 )
      then
          puts-step "Precompiling assets"
          jruby $JRUBY_OPTS -S bin/rake assets:precompile 2>&1 | indent
      else
          puts-warn "Precompile assets dry run failed!"
      fi
  fi
}

download_and_install_jdk
download_jruby_and_install_default_gems
copy_jruby_to_build
bundle_install_with_cache

create_database_yml
precompile_assets

# Set context environment variables.
set-env PATH '$HOME/.jruby/bin:$PATH'
set-env RACK_ENV 'production'
set-env RAILS_ENV 'production'
set-env JRUBY_OPTS '--$MODE -J-Xmx400m -J-XX:+UseCompressedOops -J-noverify'
set-default-env LANG en_US.UTF-8
